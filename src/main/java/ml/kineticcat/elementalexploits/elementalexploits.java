package ml.kineticcat.elementalexploits;


import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.client.itemgroup.FabricItemGroupBuilder;
import net.fabricmc.fabric.api.item.v1.FabricItemSettings;
import net.minecraft.block.Blocks;
import net.minecraft.item.BlockItem;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.Registry;
import ml.kineticcat.elementalexploits.item.*;
import ml.kineticcat.elementalexploits.block.*;

public class elementalexploits implements ModInitializer {

    public static final ItemGroup ELEMENTS = FabricItemGroupBuilder.create(
            new Identifier(info.modName, "elemental"))
            .icon(() -> new ItemStack(Blocks.COBBLESTONE))
            .appendItems(stacks -> {
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[87]));
                stacks.add(new ItemStack(element.ELEMENT[55]));
                stacks.add(new ItemStack(element.ELEMENT[37]));
                stacks.add(new ItemStack(element.ELEMENT[19]));
                stacks.add(new ItemStack(element.ELEMENT[11]));
                stacks.add(new ItemStack(element.ELEMENT[3]));
                stacks.add(new ItemStack(element.ELEMENT[1]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[88]));
                stacks.add(new ItemStack(element.ELEMENT[56]));
                stacks.add(new ItemStack(element.ELEMENT[38]));
                stacks.add(new ItemStack(element.ELEMENT[20]));
                stacks.add(new ItemStack(element.ELEMENT[12]));
                stacks.add(new ItemStack(element.ELEMENT[4]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[89]));
                stacks.add(new ItemStack(element.ELEMENT[57]));
                stacks.add(new ItemStack(element.ELEMENT[39]));
                stacks.add(new ItemStack(element.ELEMENT[21]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[90]));
                stacks.add(new ItemStack(element.ELEMENT[58]));
                stacks.add(new ItemStack(element.ELEMENT[104]));
                stacks.add(new ItemStack(element.ELEMENT[72]));
                stacks.add(new ItemStack(element.ELEMENT[40]));
                stacks.add(new ItemStack(element.ELEMENT[22]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[91]));
                stacks.add(new ItemStack(element.ELEMENT[59]));
                stacks.add(new ItemStack(element.ELEMENT[105]));
                stacks.add(new ItemStack(element.ELEMENT[73]));
                stacks.add(new ItemStack(element.ELEMENT[41]));
                stacks.add(new ItemStack(element.ELEMENT[23]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[92]));
                stacks.add(new ItemStack(element.ELEMENT[60]));
                stacks.add(new ItemStack(element.ELEMENT[106]));
                stacks.add(new ItemStack(element.ELEMENT[74]));
                stacks.add(new ItemStack(element.ELEMENT[42]));
                stacks.add(new ItemStack(element.ELEMENT[24]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[93]));
                stacks.add(new ItemStack(element.ELEMENT[61]));
                stacks.add(new ItemStack(element.ELEMENT[107]));
                stacks.add(new ItemStack(element.ELEMENT[75]));
                stacks.add(new ItemStack(element.ELEMENT[43]));
                stacks.add(new ItemStack(element.ELEMENT[25]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[94]));
                stacks.add(new ItemStack(element.ELEMENT[62]));
                stacks.add(new ItemStack(element.ELEMENT[108]));
                stacks.add(new ItemStack(element.ELEMENT[76]));
                stacks.add(new ItemStack(element.ELEMENT[44]));
                stacks.add(new ItemStack(element.ELEMENT[26]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[95]));
                stacks.add(new ItemStack(element.ELEMENT[63]));
                stacks.add(new ItemStack(element.ELEMENT[109]));
                stacks.add(new ItemStack(element.ELEMENT[77]));
                stacks.add(new ItemStack(element.ELEMENT[45]));
                stacks.add(new ItemStack(element.ELEMENT[27]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[96]));
                stacks.add(new ItemStack(element.ELEMENT[64]));
                stacks.add(new ItemStack(element.ELEMENT[110]));
                stacks.add(new ItemStack(element.ELEMENT[78]));
                stacks.add(new ItemStack(element.ELEMENT[46]));
                stacks.add(new ItemStack(element.ELEMENT[28]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[97]));
                stacks.add(new ItemStack(element.ELEMENT[65]));
                stacks.add(new ItemStack(element.ELEMENT[111]));
                stacks.add(new ItemStack(element.ELEMENT[79]));
                stacks.add(new ItemStack(element.ELEMENT[47]));
                stacks.add(new ItemStack(element.ELEMENT[29]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[98]));
                stacks.add(new ItemStack(element.ELEMENT[66]));
                stacks.add(new ItemStack(element.ELEMENT[112]));
                stacks.add(new ItemStack(element.ELEMENT[80]));
                stacks.add(new ItemStack(element.ELEMENT[48]));
                stacks.add(new ItemStack(element.ELEMENT[30]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[99]));
                stacks.add(new ItemStack(element.ELEMENT[67]));
                stacks.add(new ItemStack(element.ELEMENT[113]));
                stacks.add(new ItemStack(element.ELEMENT[81]));
                stacks.add(new ItemStack(element.ELEMENT[49]));
                stacks.add(new ItemStack(element.ELEMENT[31]));
                stacks.add(new ItemStack(element.ELEMENT[13]));
                stacks.add(new ItemStack(element.ELEMENT[5]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[100]));
                stacks.add(new ItemStack(element.ELEMENT[68]));
                stacks.add(new ItemStack(element.ELEMENT[114]));
                stacks.add(new ItemStack(element.ELEMENT[82]));
                stacks.add(new ItemStack(element.ELEMENT[50]));
                stacks.add(new ItemStack(element.ELEMENT[32]));
                stacks.add(new ItemStack(element.ELEMENT[14]));
                stacks.add(new ItemStack(element.ELEMENT[6]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[101]));
                stacks.add(new ItemStack(element.ELEMENT[69]));
                stacks.add(new ItemStack(element.ELEMENT[115]));
                stacks.add(new ItemStack(element.ELEMENT[83]));
                stacks.add(new ItemStack(element.ELEMENT[51]));
                stacks.add(new ItemStack(element.ELEMENT[33]));
                stacks.add(new ItemStack(element.ELEMENT[15]));
                stacks.add(new ItemStack(element.ELEMENT[7]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[102]));
                stacks.add(new ItemStack(element.ELEMENT[70]));
                stacks.add(new ItemStack(element.ELEMENT[116]));
                stacks.add(new ItemStack(element.ELEMENT[84]));
                stacks.add(new ItemStack(element.ELEMENT[52]));
                stacks.add(new ItemStack(element.ELEMENT[34]));
                stacks.add(new ItemStack(element.ELEMENT[16]));
                stacks.add(new ItemStack(element.ELEMENT[8]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[103]));
                stacks.add(new ItemStack(element.ELEMENT[71]));
                stacks.add(new ItemStack(element.ELEMENT[117]));
                stacks.add(new ItemStack(element.ELEMENT[85]));
                stacks.add(new ItemStack(element.ELEMENT[53]));
                stacks.add(new ItemStack(element.ELEMENT[35]));
                stacks.add(new ItemStack(element.ELEMENT[17]));
                stacks.add(new ItemStack(element.ELEMENT[9]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[0]));
                stacks.add(ItemStack.EMPTY);
                stacks.add(new ItemStack(element.ELEMENT[104]));
                stacks.add(new ItemStack(element.ELEMENT[72]));
                stacks.add(new ItemStack(element.ELEMENT[118]));
                stacks.add(new ItemStack(element.ELEMENT[86]));
                stacks.add(new ItemStack(element.ELEMENT[54]));
                stacks.add(new ItemStack(element.ELEMENT[36]));
                stacks.add(new ItemStack(element.ELEMENT[18]));
                stacks.add(new ItemStack(element.ELEMENT[10]));
                stacks.add(new ItemStack(element.ELEMENT[1]));
            })
            .build();

    @Override
    public void onInitialize() {
        for (int i = 0; i < element.ELEMENT.length; i++) {
            Registry.register(Registry.ITEM, new Identifier(info.modName, info.info[i][1]), element.ELEMENT[i]);
        }

        Registry.register(Registry.BLOCK, new Identifier(info.modName, "erlenmeyer-flask"), erlenmeyer.ERLENMEYER);
        Registry.register(Registry.ITEM, new Identifier(info.modName, "erlenmeyer-flask"), new BlockItem(erlenmeyer.ERLENMEYER, new FabricItemSettings().group(ELEMENTS)));
    }

}
